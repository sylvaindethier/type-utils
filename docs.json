{
	"id": 0,
	"name": "@sdt/typescript-utils",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "logic/If",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "If",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`boolean`"
							},
							{
								"kind": "text",
								"text": " against to be "
							},
							{
								"kind": "code",
								"text": "`true`"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/If.d.ts",
							"line": 10,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/If.d.ts#L10"
						}
					],
					"typeParameters": [
						{
							"id": 3,
							"name": "B",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`true`"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 4,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 5,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						},
						{
							"id": 6,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 103,
						"typeArguments": [
							{
								"type": "reference",
								"target": 3,
								"name": "B",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "literal",
									"value": true
								},
								"extendsType": {
									"type": "reference",
									"target": 3,
									"name": "B",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 4,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 5,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 6,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfBooleanLiteral",
						"package": "@sdt/typescript-utils"
					}
				},
				{
					"id": 7,
					"name": "IfNot",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`boolean`"
							},
							{
								"kind": "text",
								"text": " to be "
							},
							{
								"kind": "code",
								"text": "`false`"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/If.d.ts",
							"line": 23,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/If.d.ts#L23"
						}
					],
					"typeParameters": [
						{
							"id": 8,
							"name": "B",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`false`"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 9,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 10,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						},
						{
							"id": 11,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 2,
						"typeArguments": [
							{
								"type": "reference",
								"target": 8,
								"name": "B",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 10,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 9,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 11,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "If",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						2,
						7
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/If.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/If.d.ts#L1"
				}
			]
		},
		{
			"id": 12,
			"name": "logic/operators/AND",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 17,
					"name": "PRODUCT",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AND",
								"target": 13,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/AND.d.ts",
							"line": 21,
							"character": 21,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/AND.d.ts#L21"
						}
					],
					"target": 13
				},
				{
					"id": 13,
					"name": "AND",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical AND operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/AND.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/AND.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 14,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the conjunction"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 15,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the conjunction"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 16,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 2,
						"typeArguments": [
							{
								"type": "reference",
								"target": 14,
								"name": "X",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 2,
								"typeArguments": [
									{
										"type": "reference",
										"target": 15,
										"name": "Y",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									},
									{
										"type": "literal",
										"value": true
									},
									{
										"type": "literal",
										"value": false
									},
									{
										"type": "reference",
										"target": 16,
										"name": "Error",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "If",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 2,
								"typeArguments": [
									{
										"type": "reference",
										"target": 15,
										"name": "Y",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									},
									{
										"type": "literal",
										"value": false
									},
									{
										"type": "literal",
										"value": false
									},
									{
										"type": "reference",
										"target": 16,
										"name": "Error",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "If",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 16,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "If",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						17
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						13
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/AND.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/AND.d.ts#L1"
				}
			]
		},
		{
			"id": 18,
			"name": "logic/operators/EQV",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 23,
					"name": "EQV",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "NOT_XOR",
								"target": 19,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 14,
							"character": 25,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/EQV.d.ts#L14"
						}
					],
					"target": 19
				},
				{
					"id": 24,
					"name": "XNOR",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "NOT_XOR",
								"target": 19,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 19,
							"character": 25,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/EQV.d.ts#L19"
						}
					],
					"target": 19
				},
				{
					"id": 19,
					"name": "NOT_XOR",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical NOT_XOR operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/EQV.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 20,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 21,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 22,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 36,
						"typeArguments": [
							{
								"type": "reference",
								"target": 46,
								"typeArguments": [
									{
										"type": "reference",
										"target": 20,
										"name": "X",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 21,
										"name": "Y",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "XOR",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 22,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "NOT",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						23,
						24
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						19
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/EQV.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/EQV.d.ts#L1"
				}
			]
		},
		{
			"id": 25,
			"name": "logic/operators/IMP",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 26,
					"name": "IMP",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical IMP operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/IMP.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/IMP.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 27,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 28,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 29,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 40,
						"typeArguments": [
							{
								"type": "reference",
								"target": 36,
								"typeArguments": [
									{
										"type": "reference",
										"target": 27,
										"name": "X",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "NOT",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 28,
								"name": "Y",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 29,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "SUM",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "OR"
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						26
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/IMP.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/IMP.d.ts#L1"
				}
			]
		},
		{
			"id": 30,
			"name": "logic/operators/INH",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 31,
					"name": "INH",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical INH operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/INH.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/INH.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 32,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 33,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 34,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 13,
						"typeArguments": [
							{
								"type": "reference",
								"target": 32,
								"name": "X",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 36,
								"typeArguments": [
									{
										"type": "reference",
										"target": 33,
										"name": "Y",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "NOT",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 34,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "PRODUCT",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "AND"
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						31
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/INH.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/INH.d.ts#L1"
				}
			]
		},
		{
			"id": 35,
			"name": "logic/operators/NOT",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 36,
					"name": "NOT",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical NOT operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/NOT.d.ts",
							"line": 8,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/NOT.d.ts#L8"
						}
					],
					"typeParameters": [
						{
							"id": 37,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The boolean to perform the negation on"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 38,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 2,
						"typeArguments": [
							{
								"type": "reference",
								"target": 37,
								"name": "X",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "literal",
								"value": false
							},
							{
								"type": "literal",
								"value": true
							},
							{
								"type": "reference",
								"target": 38,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "If",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						36
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/NOT.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/NOT.d.ts#L1"
				}
			]
		},
		{
			"id": 39,
			"name": "logic/operators/OR",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 44,
					"name": "SUM",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "OR",
								"target": 40,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/OR.d.ts",
							"line": 21,
							"character": 20,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/OR.d.ts#L21"
						}
					],
					"target": 40
				},
				{
					"id": 40,
					"name": "OR",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical OR operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/OR.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/OR.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 41,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the disjunction"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 42,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the disjunction"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 43,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 2,
						"typeArguments": [
							{
								"type": "reference",
								"target": 41,
								"name": "X",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 2,
								"typeArguments": [
									{
										"type": "reference",
										"target": 42,
										"name": "Y",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									},
									{
										"type": "literal",
										"value": true
									},
									{
										"type": "literal",
										"value": true
									},
									{
										"type": "reference",
										"target": 43,
										"name": "Error",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "If",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 2,
								"typeArguments": [
									{
										"type": "reference",
										"target": 42,
										"name": "Y",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									},
									{
										"type": "literal",
										"value": true
									},
									{
										"type": "literal",
										"value": false
									},
									{
										"type": "reference",
										"target": 43,
										"name": "Error",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "If",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 43,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "If",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						44
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						40
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/OR.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/OR.d.ts#L1"
				}
			]
		},
		{
			"id": 45,
			"name": "logic/operators/XOR",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 46,
					"name": "XOR",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical XOR operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/XOR.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/XOR.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 47,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 48,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 49,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 13,
						"typeArguments": [
							{
								"type": "reference",
								"target": 40,
								"typeArguments": [
									{
										"type": "reference",
										"target": 47,
										"name": "X",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 48,
										"name": "Y",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "SUM",
								"package": "@sdt/typescript-utils",
								"qualifiedName": "OR"
							},
							{
								"type": "reference",
								"target": 36,
								"typeArguments": [
									{
										"type": "reference",
										"target": 13,
										"typeArguments": [
											{
												"type": "reference",
												"target": 47,
												"name": "X",
												"package": "@sdt/typescript-utils",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 48,
												"name": "Y",
												"package": "@sdt/typescript-utils",
												"refersToTypeParameter": true
											}
										],
										"name": "PRODUCT",
										"package": "@sdt/typescript-utils",
										"qualifiedName": "AND"
									}
								],
								"name": "NOT",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 49,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "PRODUCT",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "AND"
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						46
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/XOR.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/logic/operators/XOR.d.ts#L1"
				}
			]
		},
		{
			"id": 50,
			"name": "primitives/IfAny",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 59,
					"name": "IfNotAny",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfAny_Not",
								"target": 55,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAny.d.ts",
							"line": 20,
							"character": 27,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfAny.d.ts#L20"
						}
					],
					"target": 55
				},
				{
					"id": 51,
					"name": "IfAny",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`any`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAny.d.ts",
							"line": 7,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfAny.d.ts#L7"
						}
					],
					"typeParameters": [
						{
							"id": 52,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`any`"
									}
								]
							}
						},
						{
							"id": 53,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 54,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "literal",
							"value": 0
						},
						"extendsType": {
							"type": "intersection",
							"types": [
								{
									"type": "literal",
									"value": 1
								},
								{
									"type": "reference",
									"target": 52,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							]
						},
						"trueType": {
							"type": "reference",
							"target": 53,
							"name": "Then",
							"package": "@sdt/typescript-utils",
							"refersToTypeParameter": true
						},
						"falseType": {
							"type": "reference",
							"target": 54,
							"name": "Else",
							"package": "@sdt/typescript-utils",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 55,
					"name": "IfAny_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`any`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAny.d.ts",
							"line": 15,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfAny.d.ts#L15"
						}
					],
					"typeParameters": [
						{
							"id": 56,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`any`"
									}
								]
							}
						},
						{
							"id": 57,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 58,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 51,
						"typeArguments": [
							{
								"type": "reference",
								"target": 56,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 58,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 57,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfAny",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						59
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						51,
						55
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfAny.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfAny.d.ts#L1"
				}
			]
		},
		{
			"id": 60,
			"name": "primitives/IfAnyOrNever",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 65,
					"name": "IfNeverOrAny",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfAnyOrNever",
								"target": 61,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAnyOrNever.d.ts",
							"line": 14,
							"character": 30,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfAnyOrNever.d.ts#L14"
						}
					],
					"target": 61
				},
				{
					"id": 70,
					"name": "IfNotAnyOrNever",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfAnyOrNever_Not",
								"target": 66,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAnyOrNever.d.ts",
							"line": 27,
							"character": 34,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfAnyOrNever.d.ts#L27"
						}
					],
					"target": 66
				},
				{
					"id": 71,
					"name": "IfNotNeverOrAny",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfAnyOrNever_Not",
								"target": 66,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAnyOrNever.d.ts",
							"line": 32,
							"character": 34,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfAnyOrNever.d.ts#L32"
						}
					],
					"target": 66
				},
				{
					"id": 61,
					"name": "IfAnyOrNever",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`any`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`never`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAnyOrNever.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfAnyOrNever.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 62,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`never`"
									}
								]
							}
						},
						{
							"id": 63,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 64,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 51,
						"typeArguments": [
							{
								"type": "reference",
								"target": 62,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 63,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 113,
								"typeArguments": [
									{
										"type": "reference",
										"target": 62,
										"name": "T",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 63,
										"name": "Then",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 64,
										"name": "Else",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "IfNever",
								"package": "@sdt/typescript-utils"
							}
						],
						"name": "IfAny",
						"package": "@sdt/typescript-utils"
					}
				},
				{
					"id": 66,
					"name": "IfAnyOrNever_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`any`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`never`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAnyOrNever.d.ts",
							"line": 22,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfAnyOrNever.d.ts#L22"
						}
					],
					"typeParameters": [
						{
							"id": 67,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`never`"
									}
								]
							}
						},
						{
							"id": 68,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 69,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 61,
						"typeArguments": [
							{
								"type": "reference",
								"target": 67,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 69,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 68,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfAnyOrNever",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						65,
						70,
						71
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						61,
						66
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfAnyOrNever.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfAnyOrNever.d.ts#L1"
				}
			]
		},
		{
			"id": 72,
			"name": "primitives/IfBigInt",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 212,
					"name": "IfBigIntLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfBigIntLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBigIntLiteral.d.ts#L9"
						}
					],
					"target": 83
				},
				{
					"id": 213,
					"name": "IfBigIntLiteral_Not",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfBigIntLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBigIntLiteral.d.ts#L21"
						}
					],
					"target": 87
				},
				{
					"id": 81,
					"name": "IfNotBigInt",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfBigInt_Not",
								"target": 77,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigInt.d.ts",
							"line": 27,
							"character": 30,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBigInt.d.ts#L27"
						}
					],
					"target": 77
				},
				{
					"id": 214,
					"name": "IfNotBigIntLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfBigIntLiteral_Not",
								"target": 87,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigIntLiteral.d.ts",
							"line": 30,
							"character": 37,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBigIntLiteral.d.ts#L30"
						}
					],
					"target": 91
				},
				{
					"id": 73,
					"name": "IfBigInt",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`bigint`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigInt.d.ts",
							"line": 10,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBigInt.d.ts#L10"
						}
					],
					"typeParameters": [
						{
							"id": 74,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`bigint`"
									}
								]
							}
						},
						{
							"id": 75,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 76,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 66,
						"typeArguments": [
							{
								"type": "reference",
								"target": 74,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 74,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "intrinsic",
									"name": "bigint"
								},
								"trueType": {
									"type": "reference",
									"target": 75,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 76,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 76,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 77,
					"name": "IfBigInt_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`bigint`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigInt.d.ts",
							"line": 22,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBigInt.d.ts#L22"
						}
					],
					"typeParameters": [
						{
							"id": 78,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`bigint`"
									}
								]
							}
						},
						{
							"id": 79,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 80,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 73,
						"typeArguments": [
							{
								"type": "reference",
								"target": 78,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 80,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 79,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfBigInt",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						212,
						213,
						81,
						214
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						73,
						77
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfBigInt.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBigInt.d.ts#L1"
				}
			]
		},
		{
			"id": 82,
			"name": "primitives/IfBigIntLiteral",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 91,
					"name": "IfNotBigIntLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfBigIntLiteral_Not",
								"target": 87,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigIntLiteral.d.ts",
							"line": 30,
							"character": 37,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBigIntLiteral.d.ts#L30"
						}
					],
					"target": 87
				},
				{
					"id": 83,
					"name": "IfBigIntLiteral",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`bigint`"
							},
							{
								"kind": "text",
								"text": " to be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigIntLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBigIntLiteral.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 84,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`bigint`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`bigint`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						},
						{
							"id": 85,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 86,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 77,
						"typeArguments": [
							{
								"type": "reference",
								"target": 84,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 86,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "intrinsic",
									"name": "bigint"
								},
								"extendsType": {
									"type": "reference",
									"target": 84,
									"name": "V",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 86,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 85,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							}
						],
						"name": "IfNotBigInt",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfBigInt_Not"
					}
				},
				{
					"id": 87,
					"name": "IfBigIntLiteral_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`bigint`"
							},
							{
								"kind": "text",
								"text": " to not be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigIntLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBigIntLiteral.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 88,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`bigint`"
									},
									{
										"kind": "text",
										"text": " to test against not "
									},
									{
										"kind": "code",
										"text": "`bigint`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						},
						{
							"id": 89,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 90,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 83,
						"typeArguments": [
							{
								"type": "reference",
								"target": 88,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 90,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 89,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfBigIntLiteral",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						91
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						83,
						87
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfBigIntLiteral.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBigIntLiteral.d.ts#L1"
				}
			]
		},
		{
			"id": 92,
			"name": "primitives/IfBoolean",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 215,
					"name": "IfBooleanLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfBooleanLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBooleanLiteral.d.ts#L9"
						}
					],
					"target": 103
				},
				{
					"id": 216,
					"name": "IfBooleanLiteral_Not",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfBooleanLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBooleanLiteral.d.ts#L21"
						}
					],
					"target": 107
				},
				{
					"id": 101,
					"name": "IfNotBoolean",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfBoolean_Not",
								"target": 97,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBoolean.d.ts",
							"line": 27,
							"character": 31,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBoolean.d.ts#L27"
						}
					],
					"target": 97
				},
				{
					"id": 217,
					"name": "IfNotBooleanLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfBooleanLiteral_Not",
								"target": 107,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBooleanLiteral.d.ts",
							"line": 30,
							"character": 38,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBooleanLiteral.d.ts#L30"
						}
					],
					"target": 111
				},
				{
					"id": 93,
					"name": "IfBoolean",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`boolean`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBoolean.d.ts",
							"line": 10,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBoolean.d.ts#L10"
						}
					],
					"typeParameters": [
						{
							"id": 94,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									}
								]
							}
						},
						{
							"id": 95,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 96,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 66,
						"typeArguments": [
							{
								"type": "reference",
								"target": 94,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 94,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"trueType": {
									"type": "reference",
									"target": 95,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 96,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 96,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 97,
					"name": "IfBoolean_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`boolean`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBoolean.d.ts",
							"line": 22,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBoolean.d.ts#L22"
						}
					],
					"typeParameters": [
						{
							"id": 98,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									}
								]
							}
						},
						{
							"id": 99,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 100,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 93,
						"typeArguments": [
							{
								"type": "reference",
								"target": 98,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 100,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 99,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfBoolean",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						215,
						216,
						101,
						217
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						93,
						97
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfBoolean.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBoolean.d.ts#L1"
				}
			]
		},
		{
			"id": 102,
			"name": "primitives/IfBooleanLiteral",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 111,
					"name": "IfNotBooleanLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfBooleanLiteral_Not",
								"target": 107,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBooleanLiteral.d.ts",
							"line": 30,
							"character": 38,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBooleanLiteral.d.ts#L30"
						}
					],
					"target": 107
				},
				{
					"id": 103,
					"name": "IfBooleanLiteral",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`boolean`"
							},
							{
								"kind": "text",
								"text": " to be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBooleanLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBooleanLiteral.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 104,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 105,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 106,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 97,
						"typeArguments": [
							{
								"type": "reference",
								"target": 104,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 106,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"extendsType": {
									"type": "reference",
									"target": 104,
									"name": "V",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 106,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 105,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							}
						],
						"name": "IfNotBoolean",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfBoolean_Not"
					}
				},
				{
					"id": 107,
					"name": "IfBooleanLiteral_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`boolean`"
							},
							{
								"kind": "text",
								"text": " to not be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBooleanLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBooleanLiteral.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 108,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									},
									{
										"kind": "text",
										"text": " to test against not "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 109,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 110,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 103,
						"typeArguments": [
							{
								"type": "reference",
								"target": 108,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 110,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 109,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfBooleanLiteral",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						111
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						103,
						107
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfBooleanLiteral.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfBooleanLiteral.d.ts#L1"
				}
			]
		},
		{
			"id": 112,
			"name": "primitives/IfNever",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 121,
					"name": "IfNotNever",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfNever_Not",
								"target": 117,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNever.d.ts",
							"line": 20,
							"character": 29,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNever.d.ts#L20"
						}
					],
					"target": 117
				},
				{
					"id": 113,
					"name": "IfNever",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`never`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNever.d.ts",
							"line": 7,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNever.d.ts#L7"
						}
					],
					"typeParameters": [
						{
							"id": 114,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`never`"
									}
								]
							}
						},
						{
							"id": 115,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 116,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "tuple",
							"elements": [
								{
									"type": "reference",
									"target": 114,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							]
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "intrinsic",
									"name": "never"
								}
							]
						},
						"trueType": {
							"type": "reference",
							"target": 115,
							"name": "Then",
							"package": "@sdt/typescript-utils",
							"refersToTypeParameter": true
						},
						"falseType": {
							"type": "reference",
							"target": 116,
							"name": "Else",
							"package": "@sdt/typescript-utils",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 117,
					"name": "IfNever_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`never`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNever.d.ts",
							"line": 15,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNever.d.ts#L15"
						}
					],
					"typeParameters": [
						{
							"id": 118,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`never`"
									}
								]
							}
						},
						{
							"id": 119,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 120,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 113,
						"typeArguments": [
							{
								"type": "reference",
								"target": 118,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 120,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 119,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNever",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						121
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						113,
						117
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfNever.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNever.d.ts#L1"
				}
			]
		},
		{
			"id": 122,
			"name": "primitives/IfNull",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 131,
					"name": "IfNotNull",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfNull_Not",
								"target": 127,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNull.d.ts",
							"line": 26,
							"character": 28,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNull.d.ts#L26"
						}
					],
					"target": 127
				},
				{
					"id": 123,
					"name": "IfNull",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`null`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNull.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNull.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 124,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`null`"
									}
								]
							}
						},
						{
							"id": 125,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 126,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 66,
						"typeArguments": [
							{
								"type": "reference",
								"target": 124,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 124,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "literal",
									"value": null
								},
								"trueType": {
									"type": "reference",
									"target": 125,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 126,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 126,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 127,
					"name": "IfNull_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`null`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNull.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNull.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 128,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`null`"
									}
								]
							}
						},
						{
							"id": 129,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 130,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 123,
						"typeArguments": [
							{
								"type": "reference",
								"target": 128,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 130,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 129,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNull",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						131
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						123,
						127
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfNull.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNull.d.ts#L1"
				}
			]
		},
		{
			"id": 132,
			"name": "primitives/IfNumber",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 141,
					"name": "IfNotNumber",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfNumber_Not",
								"target": 137,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumber.d.ts",
							"line": 27,
							"character": 30,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNumber.d.ts#L27"
						}
					],
					"target": 137
				},
				{
					"id": 220,
					"name": "IfNotNumberLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfNumberLiteral_Not",
								"target": 147,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumberLiteral.d.ts",
							"line": 30,
							"character": 37,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNumberLiteral.d.ts#L30"
						}
					],
					"target": 151
				},
				{
					"id": 218,
					"name": "IfNumberLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfNumberLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNumberLiteral.d.ts#L9"
						}
					],
					"target": 143
				},
				{
					"id": 219,
					"name": "IfNumberLiteral_Not",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfNumberLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNumberLiteral.d.ts#L21"
						}
					],
					"target": 147
				},
				{
					"id": 133,
					"name": "IfNumber",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`number`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumber.d.ts",
							"line": 10,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNumber.d.ts#L10"
						}
					],
					"typeParameters": [
						{
							"id": 134,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`number`"
									}
								]
							}
						},
						{
							"id": 135,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 136,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 66,
						"typeArguments": [
							{
								"type": "reference",
								"target": 134,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 134,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "intrinsic",
									"name": "number"
								},
								"trueType": {
									"type": "reference",
									"target": 135,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 136,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 136,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 137,
					"name": "IfNumber_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`number`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumber.d.ts",
							"line": 22,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNumber.d.ts#L22"
						}
					],
					"typeParameters": [
						{
							"id": 138,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`number`"
									}
								]
							}
						},
						{
							"id": 139,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 140,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 133,
						"typeArguments": [
							{
								"type": "reference",
								"target": 138,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 140,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 139,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNumber",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						141,
						220,
						218,
						219
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						133,
						137
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfNumber.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNumber.d.ts#L1"
				}
			]
		},
		{
			"id": 142,
			"name": "primitives/IfNumberLiteral",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 151,
					"name": "IfNotNumberLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfNumberLiteral_Not",
								"target": 147,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumberLiteral.d.ts",
							"line": 30,
							"character": 37,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNumberLiteral.d.ts#L30"
						}
					],
					"target": 147
				},
				{
					"id": 143,
					"name": "IfNumberLiteral",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": " to be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumberLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNumberLiteral.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 144,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 145,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 146,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 137,
						"typeArguments": [
							{
								"type": "reference",
								"target": 144,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 146,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "intrinsic",
									"name": "number"
								},
								"extendsType": {
									"type": "reference",
									"target": 144,
									"name": "V",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 146,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 145,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							}
						],
						"name": "IfNotNumber",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfNumber_Not"
					}
				},
				{
					"id": 147,
					"name": "IfNumberLiteral_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": " to not be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumberLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNumberLiteral.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 148,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " to test against not "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 149,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 150,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 143,
						"typeArguments": [
							{
								"type": "reference",
								"target": 148,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 150,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 149,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNumberLiteral",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						151
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						143,
						147
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfNumberLiteral.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfNumberLiteral.d.ts#L1"
				}
			]
		},
		{
			"id": 152,
			"name": "primitives/IfString",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 161,
					"name": "IfNotString",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfString_Not",
								"target": 157,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfString.d.ts",
							"line": 27,
							"character": 30,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfString.d.ts#L27"
						}
					],
					"target": 157
				},
				{
					"id": 223,
					"name": "IfNotStringLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfStringLiteral_Not",
								"target": 167,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfStringLiteral.d.ts",
							"line": 30,
							"character": 32,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfStringLiteral.d.ts#L30"
						}
					],
					"target": 171
				},
				{
					"id": 221,
					"name": "IfStringLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfStringLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfStringLiteral.d.ts#L9"
						}
					],
					"target": 163
				},
				{
					"id": 222,
					"name": "IfStringLiteral_Not",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfStringLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfStringLiteral.d.ts#L21"
						}
					],
					"target": 167
				},
				{
					"id": 153,
					"name": "IfString",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`string`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfString.d.ts",
							"line": 10,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfString.d.ts#L10"
						}
					],
					"typeParameters": [
						{
							"id": 154,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`string`"
									}
								]
							}
						},
						{
							"id": 155,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 156,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 66,
						"typeArguments": [
							{
								"type": "reference",
								"target": 154,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 154,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "intrinsic",
									"name": "string"
								},
								"trueType": {
									"type": "reference",
									"target": 155,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 156,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 156,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 157,
					"name": "IfString_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`string`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfString.d.ts",
							"line": 22,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfString.d.ts#L22"
						}
					],
					"typeParameters": [
						{
							"id": 158,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`string`"
									}
								]
							}
						},
						{
							"id": 159,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 160,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 153,
						"typeArguments": [
							{
								"type": "reference",
								"target": 158,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 160,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 159,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfString",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						161,
						223,
						221,
						222
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						153,
						157
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfString.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfString.d.ts#L1"
				}
			]
		},
		{
			"id": 162,
			"name": "primitives/IfStringLiteral",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 171,
					"name": "IfNotStringLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfStringLiteral_Not",
								"target": 167,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfStringLiteral.d.ts",
							"line": 30,
							"character": 32,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfStringLiteral.d.ts#L30"
						}
					],
					"target": 167
				},
				{
					"id": 163,
					"name": "IfStringLiteral",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`string`"
							},
							{
								"kind": "text",
								"text": " to be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfStringLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfStringLiteral.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 164,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 165,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 166,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 157,
						"typeArguments": [
							{
								"type": "reference",
								"target": 164,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 166,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "intrinsic",
									"name": "string"
								},
								"extendsType": {
									"type": "reference",
									"target": 164,
									"name": "V",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 166,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 165,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							}
						],
						"name": "IfNotString",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfString_Not"
					}
				},
				{
					"id": 167,
					"name": "IfStringLiteral_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`string`"
							},
							{
								"kind": "text",
								"text": " to not be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfStringLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfStringLiteral.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 168,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " to test against not "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 169,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 170,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 163,
						"typeArguments": [
							{
								"type": "reference",
								"target": 168,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 170,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 169,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfStringLiteral",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						171
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						163,
						167
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfStringLiteral.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfStringLiteral.d.ts#L1"
				}
			]
		},
		{
			"id": 172,
			"name": "primitives/IfSymbol",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 181,
					"name": "IfNotSymbol",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfSymbol_Not",
								"target": 177,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbol.d.ts",
							"line": 27,
							"character": 30,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfSymbol.d.ts#L27"
						}
					],
					"target": 177
				},
				{
					"id": 226,
					"name": "IfNotSymbolLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfSymbolLiteral_Not",
								"target": 187,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbolLiteral.d.ts",
							"line": 30,
							"character": 32,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfSymbolLiteral.d.ts#L30"
						}
					],
					"target": 191
				},
				{
					"id": 224,
					"name": "IfSymbolLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfSymbolLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfSymbolLiteral.d.ts#L9"
						}
					],
					"target": 183
				},
				{
					"id": 225,
					"name": "IfSymbolLiteral_Not",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfSymbolLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfSymbolLiteral.d.ts#L21"
						}
					],
					"target": 187
				},
				{
					"id": 173,
					"name": "IfSymbol",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`symbol`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbol.d.ts",
							"line": 10,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfSymbol.d.ts#L10"
						}
					],
					"typeParameters": [
						{
							"id": 174,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`symbol`"
									}
								]
							}
						},
						{
							"id": 175,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 176,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 66,
						"typeArguments": [
							{
								"type": "reference",
								"target": 174,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 174,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "intrinsic",
									"name": "symbol"
								},
								"trueType": {
									"type": "reference",
									"target": 175,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 176,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 176,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 177,
					"name": "IfSymbol_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`symbol`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbol.d.ts",
							"line": 22,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfSymbol.d.ts#L22"
						}
					],
					"typeParameters": [
						{
							"id": 178,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`symbol`"
									}
								]
							}
						},
						{
							"id": 179,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 180,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 173,
						"typeArguments": [
							{
								"type": "reference",
								"target": 178,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 180,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 179,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfSymbol",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						181,
						226,
						224,
						225
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						173,
						177
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfSymbol.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfSymbol.d.ts#L1"
				}
			]
		},
		{
			"id": 182,
			"name": "primitives/IfSymbolLiteral",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 191,
					"name": "IfNotSymbolLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfSymbolLiteral_Not",
								"target": 187,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbolLiteral.d.ts",
							"line": 30,
							"character": 32,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfSymbolLiteral.d.ts#L30"
						}
					],
					"target": 187
				},
				{
					"id": 183,
					"name": "IfSymbolLiteral",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`symbol`"
							},
							{
								"kind": "text",
								"text": " to be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbolLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfSymbolLiteral.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 184,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`symbol`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`symbol`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "symbol"
							}
						},
						{
							"id": 185,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 186,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 177,
						"typeArguments": [
							{
								"type": "reference",
								"target": 184,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 186,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "intrinsic",
									"name": "symbol"
								},
								"extendsType": {
									"type": "reference",
									"target": 184,
									"name": "V",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 186,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 185,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							}
						],
						"name": "IfNotSymbol",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfSymbol_Not"
					}
				},
				{
					"id": 187,
					"name": "IfSymbolLiteral_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`symbol`"
							},
							{
								"kind": "text",
								"text": " to not be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbolLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfSymbolLiteral.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 188,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`symbol`"
									},
									{
										"kind": "text",
										"text": " to test against not "
									},
									{
										"kind": "code",
										"text": "`symbol`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "symbol"
							}
						},
						{
							"id": 189,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 190,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 183,
						"typeArguments": [
							{
								"type": "reference",
								"target": 188,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 190,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 189,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfSymbolLiteral",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						191
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						183,
						187
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfSymbolLiteral.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfSymbolLiteral.d.ts#L1"
				}
			]
		},
		{
			"id": 192,
			"name": "primitives/IfUndefined",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 201,
					"name": "IfNotUndefined",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfUndefined_Not",
								"target": 197,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfUndefined.d.ts",
							"line": 26,
							"character": 33,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfUndefined.d.ts#L26"
						}
					],
					"target": 197
				},
				{
					"id": 193,
					"name": "IfUndefined",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfUndefined.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfUndefined.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 194,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									}
								]
							}
						},
						{
							"id": 195,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 196,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 66,
						"typeArguments": [
							{
								"type": "reference",
								"target": 194,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 194,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "intrinsic",
									"name": "undefined"
								},
								"trueType": {
									"type": "reference",
									"target": 195,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 196,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 196,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 197,
					"name": "IfUndefined_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfUndefined.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfUndefined.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 198,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									}
								]
							}
						},
						{
							"id": 199,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 200,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 193,
						"typeArguments": [
							{
								"type": "reference",
								"target": 198,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 200,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 199,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfUndefined",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						201
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						193,
						197
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfUndefined.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfUndefined.d.ts#L1"
				}
			]
		},
		{
			"id": 202,
			"name": "primitives/IfUnknown",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 211,
					"name": "IfNotUnknown",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfUnknown_Not",
								"target": 207,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfUnknown.d.ts",
							"line": 26,
							"character": 31,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfUnknown.d.ts#L26"
						}
					],
					"target": 207
				},
				{
					"id": 203,
					"name": "IfUnknown",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type again "
							},
							{
								"kind": "code",
								"text": "`unknown`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfUnknown.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfUnknown.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 204,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`unknown`"
									}
								]
							}
						},
						{
							"id": 205,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 206,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 55,
						"typeArguments": [
							{
								"type": "reference",
								"target": 204,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "intrinsic",
									"name": "unknown"
								},
								"extendsType": {
									"type": "reference",
									"target": 204,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 205,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 206,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 206,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAny",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAny_Not"
					}
				},
				{
					"id": 207,
					"name": "IfUnknown_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`unknown`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfUnknown.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfUnknown.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 208,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`unknown`"
									}
								]
							}
						},
						{
							"id": 209,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 210,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 203,
						"typeArguments": [
							{
								"type": "reference",
								"target": 208,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 210,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 209,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfUnknown",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						211
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						203,
						207
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfUnknown.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/8ee210819a426e5bf006e19c7f3394303637017e/types/primitives/IfUnknown.d.ts#L1"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"children": [
				1,
				12,
				18,
				25,
				30,
				35,
				39,
				45,
				50,
				60,
				72,
				82,
				92,
				102,
				112,
				122,
				132,
				142,
				152,
				162,
				172,
				182,
				192,
				202
			]
		}
	],
	"packageName": "@sdt/typescript-utils",
	"packageVersion": "0.3.0",
	"readme": [
		{
			"kind": "text",
			"text": "# @sdt/typescript-utils\n\n![NPM Version](https://img.shields.io/npm/v/%40sdt%2Ftypescript-utils)\n![Coverage](https://github.com/sylvaindethier/typescript-utils/blob/gh-pages/coverage.svg?raw=true)\n![CI](https://github.com/sylvaindethier/typescript-utils/workflows/CI/badge.svg)\n\n> TypeScript type safe utilities completely tested\n\n## Install\n\n- "
		},
		{
			"kind": "code",
			"text": "`npm`"
		},
		{
			"kind": "text",
			"text": "\n\n  "
		},
		{
			"kind": "code",
			"text": "```sh\n  npm install -D @sdt/typescript-utils\n  ```"
		},
		{
			"kind": "text",
			"text": "\n\n- "
		},
		{
			"kind": "code",
			"text": "`pnpm`"
		},
		{
			"kind": "text",
			"text": "\n\n  "
		},
		{
			"kind": "code",
			"text": "```sh\n  pnpm add -D @sdt/typescript-utils\n  ```"
		},
		{
			"kind": "text",
			"text": "\n\n- "
		},
		{
			"kind": "code",
			"text": "`yarn`"
		},
		{
			"kind": "text",
			"text": "\n\n  "
		},
		{
			"kind": "code",
			"text": "```sh\n  yarn add -D @sdt/typescript-utils\n  ```"
		},
		{
			"kind": "text",
			"text": "\n\n## Documentation\n\nSee the [documentation page](https://sylvaindethier.github.io/typescript-utils/)."
		}
	],
	"symbolIdMap": {
		"1": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": ""
		},
		"2": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "If"
		},
		"3": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "B"
		},
		"4": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "Then"
		},
		"5": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "Else"
		},
		"6": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "Error"
		},
		"7": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "IfNot"
		},
		"8": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "B"
		},
		"9": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "Then"
		},
		"10": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "Else"
		},
		"11": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "Error"
		},
		"12": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": ""
		},
		"13": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "AND"
		},
		"14": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "X"
		},
		"15": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "Y"
		},
		"16": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "Error"
		},
		"17": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "PRODUCT"
		},
		"18": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": ""
		},
		"19": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "NOT_XOR"
		},
		"20": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "X"
		},
		"21": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "Y"
		},
		"22": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "Error"
		},
		"23": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "EQV"
		},
		"24": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "XNOR"
		},
		"25": {
			"sourceFileName": "types/logic/operators/IMP.d.ts",
			"qualifiedName": ""
		},
		"26": {
			"sourceFileName": "types/logic/operators/IMP.d.ts",
			"qualifiedName": "IMP"
		},
		"27": {
			"sourceFileName": "types/logic/operators/IMP.d.ts",
			"qualifiedName": "X"
		},
		"28": {
			"sourceFileName": "types/logic/operators/IMP.d.ts",
			"qualifiedName": "Y"
		},
		"29": {
			"sourceFileName": "types/logic/operators/IMP.d.ts",
			"qualifiedName": "Error"
		},
		"30": {
			"sourceFileName": "types/logic/operators/INH.d.ts",
			"qualifiedName": ""
		},
		"31": {
			"sourceFileName": "types/logic/operators/INH.d.ts",
			"qualifiedName": "INH"
		},
		"32": {
			"sourceFileName": "types/logic/operators/INH.d.ts",
			"qualifiedName": "X"
		},
		"33": {
			"sourceFileName": "types/logic/operators/INH.d.ts",
			"qualifiedName": "Y"
		},
		"34": {
			"sourceFileName": "types/logic/operators/INH.d.ts",
			"qualifiedName": "Error"
		},
		"35": {
			"sourceFileName": "types/logic/operators/NOT.d.ts",
			"qualifiedName": ""
		},
		"36": {
			"sourceFileName": "types/logic/operators/NOT.d.ts",
			"qualifiedName": "NOT"
		},
		"37": {
			"sourceFileName": "types/logic/operators/NOT.d.ts",
			"qualifiedName": "X"
		},
		"38": {
			"sourceFileName": "types/logic/operators/NOT.d.ts",
			"qualifiedName": "Error"
		},
		"39": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": ""
		},
		"40": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "OR"
		},
		"41": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "X"
		},
		"42": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "Y"
		},
		"43": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "Error"
		},
		"44": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "SUM"
		},
		"45": {
			"sourceFileName": "types/logic/operators/XOR.d.ts",
			"qualifiedName": ""
		},
		"46": {
			"sourceFileName": "types/logic/operators/XOR.d.ts",
			"qualifiedName": "XOR"
		},
		"47": {
			"sourceFileName": "types/logic/operators/XOR.d.ts",
			"qualifiedName": "X"
		},
		"48": {
			"sourceFileName": "types/logic/operators/XOR.d.ts",
			"qualifiedName": "Y"
		},
		"49": {
			"sourceFileName": "types/logic/operators/XOR.d.ts",
			"qualifiedName": "Error"
		},
		"50": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": ""
		},
		"51": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "IfAny"
		},
		"52": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "T"
		},
		"53": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "Then"
		},
		"54": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "Else"
		},
		"55": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "IfAny_Not"
		},
		"56": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "T"
		},
		"57": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "Then"
		},
		"58": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "Else"
		},
		"59": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "IfNotAny"
		},
		"60": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": ""
		},
		"61": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "IfAnyOrNever"
		},
		"62": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "T"
		},
		"63": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "Then"
		},
		"64": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "Else"
		},
		"65": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "IfNeverOrAny"
		},
		"66": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "IfAnyOrNever_Not"
		},
		"67": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "T"
		},
		"68": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "Then"
		},
		"69": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "Else"
		},
		"70": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "IfNotAnyOrNever"
		},
		"71": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "IfNotNeverOrAny"
		},
		"72": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": ""
		},
		"73": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "IfBigInt"
		},
		"74": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "T"
		},
		"75": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "Then"
		},
		"76": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "Else"
		},
		"77": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "IfBigInt_Not"
		},
		"78": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "T"
		},
		"79": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "Then"
		},
		"80": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "Else"
		},
		"81": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "IfNotBigInt"
		},
		"82": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": ""
		},
		"83": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "IfBigIntLiteral"
		},
		"84": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "V"
		},
		"85": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"86": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"87": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "IfBigIntLiteral_Not"
		},
		"88": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "V"
		},
		"89": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"90": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"91": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "IfNotBigIntLiteral"
		},
		"92": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": ""
		},
		"93": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "IfBoolean"
		},
		"94": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "T"
		},
		"95": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "Then"
		},
		"96": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "Else"
		},
		"97": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "IfBoolean_Not"
		},
		"98": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "T"
		},
		"99": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "Then"
		},
		"100": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "Else"
		},
		"101": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "IfNotBoolean"
		},
		"102": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": ""
		},
		"103": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "IfBooleanLiteral"
		},
		"104": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "V"
		},
		"105": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"106": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"107": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "IfBooleanLiteral_Not"
		},
		"108": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "V"
		},
		"109": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"110": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"111": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "IfNotBooleanLiteral"
		},
		"112": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": ""
		},
		"113": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "IfNever"
		},
		"114": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "T"
		},
		"115": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "Then"
		},
		"116": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "Else"
		},
		"117": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "IfNever_Not"
		},
		"118": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "T"
		},
		"119": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "Then"
		},
		"120": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "Else"
		},
		"121": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "IfNotNever"
		},
		"122": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": ""
		},
		"123": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "IfNull"
		},
		"124": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "T"
		},
		"125": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "Then"
		},
		"126": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "Else"
		},
		"127": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "IfNull_Not"
		},
		"128": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "T"
		},
		"129": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "Then"
		},
		"130": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "Else"
		},
		"131": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "IfNotNull"
		},
		"132": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": ""
		},
		"133": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "IfNumber"
		},
		"134": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "T"
		},
		"135": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "Then"
		},
		"136": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "Else"
		},
		"137": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "IfNumber_Not"
		},
		"138": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "T"
		},
		"139": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "Then"
		},
		"140": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "Else"
		},
		"141": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "IfNotNumber"
		},
		"142": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": ""
		},
		"143": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "IfNumberLiteral"
		},
		"144": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "V"
		},
		"145": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"146": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"147": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "IfNumberLiteral_Not"
		},
		"148": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "V"
		},
		"149": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"150": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"151": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "IfNotNumberLiteral"
		},
		"152": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": ""
		},
		"153": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "IfString"
		},
		"154": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "T"
		},
		"155": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "Then"
		},
		"156": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "Else"
		},
		"157": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "IfString_Not"
		},
		"158": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "T"
		},
		"159": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "Then"
		},
		"160": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "Else"
		},
		"161": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "IfNotString"
		},
		"162": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": ""
		},
		"163": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "IfStringLiteral"
		},
		"164": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "V"
		},
		"165": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"166": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"167": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "IfStringLiteral_Not"
		},
		"168": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "V"
		},
		"169": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"170": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"171": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "IfNotStringLiteral"
		},
		"172": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": ""
		},
		"173": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "IfSymbol"
		},
		"174": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "T"
		},
		"175": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "Then"
		},
		"176": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "Else"
		},
		"177": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "IfSymbol_Not"
		},
		"178": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "T"
		},
		"179": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "Then"
		},
		"180": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "Else"
		},
		"181": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "IfNotSymbol"
		},
		"182": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": ""
		},
		"183": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "IfSymbolLiteral"
		},
		"184": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "V"
		},
		"185": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"186": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"187": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "IfSymbolLiteral_Not"
		},
		"188": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "V"
		},
		"189": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"190": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"191": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "IfNotSymbolLiteral"
		},
		"192": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": ""
		},
		"193": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "IfUndefined"
		},
		"194": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "T"
		},
		"195": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "Then"
		},
		"196": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "Else"
		},
		"197": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "IfUndefined_Not"
		},
		"198": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "T"
		},
		"199": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "Then"
		},
		"200": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "Else"
		},
		"201": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "IfNotUndefined"
		},
		"202": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": ""
		},
		"203": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "IfUnknown"
		},
		"204": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "T"
		},
		"205": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "Then"
		},
		"206": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "Else"
		},
		"207": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "IfUnknown_Not"
		},
		"208": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "T"
		},
		"209": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "Then"
		},
		"210": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "Else"
		},
		"211": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "IfNotUnknown"
		},
		"212": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "IfBigIntLiteral"
		},
		"213": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "IfBigIntLiteral_Not"
		},
		"214": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "IfNotBigIntLiteral"
		},
		"215": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "IfBooleanLiteral"
		},
		"216": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "IfBooleanLiteral_Not"
		},
		"217": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "IfNotBooleanLiteral"
		},
		"218": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "IfNumberLiteral"
		},
		"219": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "IfNumberLiteral_Not"
		},
		"220": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "IfNotNumberLiteral"
		},
		"221": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "IfStringLiteral"
		},
		"222": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "IfStringLiteral_Not"
		},
		"223": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "IfNotStringLiteral"
		},
		"224": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "IfSymbolLiteral"
		},
		"225": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "IfSymbolLiteral_Not"
		},
		"226": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "IfNotSymbolLiteral"
		}
	}
}