{
	"id": 0,
	"name": "@sdt/typescript-utils",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "logic/If",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "If",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`boolean`"
							},
							{
								"kind": "text",
								"text": " against to be "
							},
							{
								"kind": "code",
								"text": "`true`"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/If.d.ts",
							"line": 10,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/If.d.ts#L10"
						}
					],
					"typeParameters": [
						{
							"id": 3,
							"name": "B",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`true`"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 4,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 5,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						},
						{
							"id": 6,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 120,
						"typeArguments": [
							{
								"type": "reference",
								"target": 3,
								"name": "B",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "literal",
									"value": true
								},
								"extendsType": {
									"type": "reference",
									"target": 3,
									"name": "B",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 4,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 5,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 6,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfBooleanLiteral",
						"package": "@sdt/typescript-utils"
					}
				},
				{
					"id": 7,
					"name": "IfNot",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`boolean`"
							},
							{
								"kind": "text",
								"text": " to be "
							},
							{
								"kind": "code",
								"text": "`false`"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/If.d.ts",
							"line": 23,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/If.d.ts#L23"
						}
					],
					"typeParameters": [
						{
							"id": 8,
							"name": "B",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`false`"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 9,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 10,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						},
						{
							"id": 11,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 2,
						"typeArguments": [
							{
								"type": "reference",
								"target": 8,
								"name": "B",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 10,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 9,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 11,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "If",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						2,
						7
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/If.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/If.d.ts#L1"
				}
			]
		},
		{
			"id": 66,
			"name": "logic/operators",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 242,
					"name": "AND",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/AND.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/AND.d.ts#L9"
						}
					],
					"target": 13
				},
				{
					"id": 247,
					"name": "EQV",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 27,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/EQV.d.ts#L27"
						}
					],
					"target": 30
				},
				{
					"id": 248,
					"name": "IMP",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/IMP.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/IMP.d.ts#L9"
						}
					],
					"target": 35
				},
				{
					"id": 249,
					"name": "INH",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/INH.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/INH.d.ts#L9"
						}
					],
					"target": 40
				},
				{
					"id": 239,
					"name": "NOT",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/NOT.d.ts",
							"line": 8,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/NOT.d.ts#L8"
						}
					],
					"target": 45
				},
				{
					"id": 245,
					"name": "NOT_XOR",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/EQV.d.ts#L9"
						}
					],
					"target": 22
				},
				{
					"id": 240,
					"name": "OR",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/OR.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/OR.d.ts#L9"
						}
					],
					"target": 50
				},
				{
					"id": 243,
					"name": "PRODUCT",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/AND.d.ts",
							"line": 26,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/AND.d.ts#L26"
						}
					],
					"target": 17
				},
				{
					"id": 241,
					"name": "SUM",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/OR.d.ts",
							"line": 26,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/OR.d.ts#L26"
						}
					],
					"target": 54
				},
				{
					"id": 246,
					"name": "XNOR",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 18,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/EQV.d.ts#L18"
						}
					],
					"target": 26
				},
				{
					"id": 244,
					"name": "XOR",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/XOR.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/XOR.d.ts#L9"
						}
					],
					"target": 62
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						242,
						247,
						248,
						249,
						239,
						245,
						240,
						243,
						241,
						246,
						244
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators.d.ts#L1"
				}
			]
		},
		{
			"id": 12,
			"name": "logic/operators/AND",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 13,
					"name": "AND",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical AND operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/AND.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/AND.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 14,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the conjunction"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 15,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the conjunction"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 16,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 2,
						"typeArguments": [
							{
								"type": "reference",
								"target": 14,
								"name": "X",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 2,
								"typeArguments": [
									{
										"type": "reference",
										"target": 15,
										"name": "Y",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "If",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "literal",
								"value": false
							},
							{
								"type": "reference",
								"target": 16,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "If",
						"package": "@sdt/typescript-utils"
					}
				},
				{
					"id": 17,
					"name": "PRODUCT",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical PRODUCT (= AND) operator\n"
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AND",
								"target": 13,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/AND.d.ts",
							"line": 26,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/AND.d.ts#L26"
						}
					],
					"typeParameters": [
						{
							"id": 18,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the conjunction"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 19,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the conjunction"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 20,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 13,
						"typeArguments": [
							{
								"type": "reference",
								"target": 18,
								"name": "X",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 19,
								"name": "Y",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 20,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "AND",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						13,
						17
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/AND.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/AND.d.ts#L1"
				}
			]
		},
		{
			"id": 21,
			"name": "logic/operators/EQV",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 30,
					"name": "EQV",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical EQV operator (= XNOR = NOT_XOR)\n"
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "NOT_XOR",
								"target": 22,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 27,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/EQV.d.ts#L27"
						}
					],
					"typeParameters": [
						{
							"id": 31,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 32,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 33,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 22,
						"typeArguments": [
							{
								"type": "reference",
								"target": 31,
								"name": "X",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 32,
								"name": "Y",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 33,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "NOT_XOR",
						"package": "@sdt/typescript-utils"
					}
				},
				{
					"id": 22,
					"name": "NOT_XOR",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical NOT_XOR operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/EQV.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 23,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 24,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 25,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 45,
						"typeArguments": [
							{
								"type": "reference",
								"target": 62,
								"typeArguments": [
									{
										"type": "reference",
										"target": 23,
										"name": "X",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 24,
										"name": "Y",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "XOR",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 25,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "NOT",
						"package": "@sdt/typescript-utils"
					}
				},
				{
					"id": 26,
					"name": "XNOR",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical XNOR operator\n"
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "NOT_XOR",
								"target": 22,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 18,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/EQV.d.ts#L18"
						}
					],
					"typeParameters": [
						{
							"id": 27,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 28,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 29,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 22,
						"typeArguments": [
							{
								"type": "reference",
								"target": 27,
								"name": "X",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 28,
								"name": "Y",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 29,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "NOT_XOR",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						30,
						22,
						26
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/EQV.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/EQV.d.ts#L1"
				}
			]
		},
		{
			"id": 34,
			"name": "logic/operators/IMP",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 35,
					"name": "IMP",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical IMP operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/IMP.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/IMP.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 36,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 37,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 38,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 54,
						"typeArguments": [
							{
								"type": "reference",
								"target": 45,
								"typeArguments": [
									{
										"type": "reference",
										"target": 36,
										"name": "X",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "NOT",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 37,
								"name": "Y",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 38,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "SUM",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						35
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/IMP.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/IMP.d.ts#L1"
				}
			]
		},
		{
			"id": 39,
			"name": "logic/operators/INH",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 40,
					"name": "INH",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical INH operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/INH.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/INH.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 41,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 42,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 43,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 17,
						"typeArguments": [
							{
								"type": "reference",
								"target": 41,
								"name": "X",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 45,
								"typeArguments": [
									{
										"type": "reference",
										"target": 42,
										"name": "Y",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "NOT",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 43,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "PRODUCT",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						40
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/INH.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/INH.d.ts#L1"
				}
			]
		},
		{
			"id": 44,
			"name": "logic/operators/NOT",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 45,
					"name": "NOT",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical NOT operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/NOT.d.ts",
							"line": 8,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/NOT.d.ts#L8"
						}
					],
					"typeParameters": [
						{
							"id": 46,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The boolean to perform the negation on"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 47,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 2,
						"typeArguments": [
							{
								"type": "reference",
								"target": 46,
								"name": "X",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "literal",
								"value": false
							},
							{
								"type": "literal",
								"value": true
							},
							{
								"type": "reference",
								"target": 47,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "If",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						45
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/NOT.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/NOT.d.ts#L1"
				}
			]
		},
		{
			"id": 48,
			"name": "logic/operators/NOT_XOR",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 231,
					"name": "EQV",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 27,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/EQV.d.ts#L27"
						}
					],
					"target": 30
				},
				{
					"id": 229,
					"name": "NOT_XOR",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/EQV.d.ts#L9"
						}
					],
					"target": 22
				},
				{
					"id": 230,
					"name": "XNOR",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 18,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/EQV.d.ts#L18"
						}
					],
					"target": 26
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						231,
						229,
						230
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/NOT_XOR.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/NOT_XOR.d.ts#L1"
				}
			]
		},
		{
			"id": 49,
			"name": "logic/operators/OR",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 50,
					"name": "OR",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical OR operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/OR.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/OR.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 51,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the disjunction"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 52,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the disjunction"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 53,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 2,
						"typeArguments": [
							{
								"type": "reference",
								"target": 51,
								"name": "X",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "literal",
								"value": true
							},
							{
								"type": "reference",
								"target": 2,
								"typeArguments": [
									{
										"type": "reference",
										"target": 52,
										"name": "Y",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "If",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 53,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "If",
						"package": "@sdt/typescript-utils"
					}
				},
				{
					"id": 54,
					"name": "SUM",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical SUM (= OR) operator\n"
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "OR",
								"target": 50,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/OR.d.ts",
							"line": 26,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/OR.d.ts#L26"
						}
					],
					"typeParameters": [
						{
							"id": 55,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the disjunction"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 56,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the disjunction"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 57,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 50,
						"typeArguments": [
							{
								"type": "reference",
								"target": 55,
								"name": "X",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 56,
								"name": "Y",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 57,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "OR",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						50,
						54
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/OR.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/OR.d.ts#L1"
				}
			]
		},
		{
			"id": 58,
			"name": "logic/operators/PRODUCT",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 232,
					"name": "AND",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/AND.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/AND.d.ts#L9"
						}
					],
					"target": 13
				},
				{
					"id": 233,
					"name": "PRODUCT",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/AND.d.ts",
							"line": 26,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/AND.d.ts#L26"
						}
					],
					"target": 17
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						232,
						233
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/PRODUCT.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/PRODUCT.d.ts#L1"
				}
			]
		},
		{
			"id": 59,
			"name": "logic/operators/SUM",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 234,
					"name": "OR",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/OR.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/OR.d.ts#L9"
						}
					],
					"target": 50
				},
				{
					"id": 235,
					"name": "SUM",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/OR.d.ts",
							"line": 26,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/OR.d.ts#L26"
						}
					],
					"target": 54
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						234,
						235
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/SUM.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/SUM.d.ts#L1"
				}
			]
		},
		{
			"id": 60,
			"name": "logic/operators/XNOR",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 238,
					"name": "EQV",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 27,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/EQV.d.ts#L27"
						}
					],
					"target": 30
				},
				{
					"id": 236,
					"name": "NOT_XOR",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/EQV.d.ts#L9"
						}
					],
					"target": 22
				},
				{
					"id": 237,
					"name": "XNOR",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "logic/operators/EQV.d.ts",
							"line": 18,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/EQV.d.ts#L18"
						}
					],
					"target": 26
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						238,
						236,
						237
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/XNOR.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/XNOR.d.ts#L1"
				}
			]
		},
		{
			"id": 61,
			"name": "logic/operators/XOR",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 62,
					"name": "XOR",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logical XOR operator"
							}
						]
					},
					"sources": [
						{
							"fileName": "logic/operators/XOR.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/XOR.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 63,
							"name": "X",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The X boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 64,
							"name": "Y",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Y boolean to perform the operation"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 65,
							"name": "Error",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case any of the boolean is not literal"
									}
								]
							},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 17,
						"typeArguments": [
							{
								"type": "reference",
								"target": 54,
								"typeArguments": [
									{
										"type": "reference",
										"target": 63,
										"name": "X",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 64,
										"name": "Y",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "SUM",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 45,
								"typeArguments": [
									{
										"type": "reference",
										"target": 17,
										"typeArguments": [
											{
												"type": "reference",
												"target": 63,
												"name": "X",
												"package": "@sdt/typescript-utils",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 64,
												"name": "Y",
												"package": "@sdt/typescript-utils",
												"refersToTypeParameter": true
											}
										],
										"name": "PRODUCT",
										"package": "@sdt/typescript-utils"
									}
								],
								"name": "NOT",
								"package": "@sdt/typescript-utils"
							},
							{
								"type": "reference",
								"target": 65,
								"name": "Error",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "PRODUCT",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						62
					]
				}
			],
			"sources": [
				{
					"fileName": "logic/operators/XOR.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/logic/operators/XOR.d.ts#L1"
				}
			]
		},
		{
			"id": 67,
			"name": "primitives/IfAny",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 76,
					"name": "IfNotAny",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfAny_Not",
								"target": 72,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAny.d.ts",
							"line": 20,
							"character": 27,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfAny.d.ts#L20"
						}
					],
					"target": 72
				},
				{
					"id": 68,
					"name": "IfAny",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`any`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAny.d.ts",
							"line": 7,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfAny.d.ts#L7"
						}
					],
					"typeParameters": [
						{
							"id": 69,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`any`"
									}
								]
							}
						},
						{
							"id": 70,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 71,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "literal",
							"value": 0
						},
						"extendsType": {
							"type": "intersection",
							"types": [
								{
									"type": "literal",
									"value": 1
								},
								{
									"type": "reference",
									"target": 69,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							]
						},
						"trueType": {
							"type": "reference",
							"target": 70,
							"name": "Then",
							"package": "@sdt/typescript-utils",
							"refersToTypeParameter": true
						},
						"falseType": {
							"type": "reference",
							"target": 71,
							"name": "Else",
							"package": "@sdt/typescript-utils",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 72,
					"name": "IfAny_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`any`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAny.d.ts",
							"line": 15,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfAny.d.ts#L15"
						}
					],
					"typeParameters": [
						{
							"id": 73,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`any`"
									}
								]
							}
						},
						{
							"id": 74,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 75,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 68,
						"typeArguments": [
							{
								"type": "reference",
								"target": 73,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 75,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 74,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfAny",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						76
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						68,
						72
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfAny.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfAny.d.ts#L1"
				}
			]
		},
		{
			"id": 77,
			"name": "primitives/IfAnyOrNever",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 82,
					"name": "IfNeverOrAny",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfAnyOrNever",
								"target": 78,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAnyOrNever.d.ts",
							"line": 14,
							"character": 30,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfAnyOrNever.d.ts#L14"
						}
					],
					"target": 78
				},
				{
					"id": 87,
					"name": "IfNotAnyOrNever",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfAnyOrNever_Not",
								"target": 83,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAnyOrNever.d.ts",
							"line": 27,
							"character": 34,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfAnyOrNever.d.ts#L27"
						}
					],
					"target": 83
				},
				{
					"id": 88,
					"name": "IfNotNeverOrAny",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfAnyOrNever_Not",
								"target": 83,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAnyOrNever.d.ts",
							"line": 32,
							"character": 34,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfAnyOrNever.d.ts#L32"
						}
					],
					"target": 83
				},
				{
					"id": 78,
					"name": "IfAnyOrNever",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`any`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`never`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAnyOrNever.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfAnyOrNever.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 79,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`never`"
									}
								]
							}
						},
						{
							"id": 80,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 81,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 68,
						"typeArguments": [
							{
								"type": "reference",
								"target": 79,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 80,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 130,
								"typeArguments": [
									{
										"type": "reference",
										"target": 79,
										"name": "T",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 80,
										"name": "Then",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 81,
										"name": "Else",
										"package": "@sdt/typescript-utils",
										"refersToTypeParameter": true
									}
								],
								"name": "IfNever",
								"package": "@sdt/typescript-utils"
							}
						],
						"name": "IfAny",
						"package": "@sdt/typescript-utils"
					}
				},
				{
					"id": 83,
					"name": "IfAnyOrNever_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`any`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`never`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfAnyOrNever.d.ts",
							"line": 22,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfAnyOrNever.d.ts#L22"
						}
					],
					"typeParameters": [
						{
							"id": 84,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`never`"
									}
								]
							}
						},
						{
							"id": 85,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 86,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 78,
						"typeArguments": [
							{
								"type": "reference",
								"target": 84,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 86,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 85,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfAnyOrNever",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						82,
						87,
						88
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						78,
						83
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfAnyOrNever.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfAnyOrNever.d.ts#L1"
				}
			]
		},
		{
			"id": 89,
			"name": "primitives/IfBigInt",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 250,
					"name": "IfBigIntLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfBigIntLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBigIntLiteral.d.ts#L9"
						}
					],
					"target": 100
				},
				{
					"id": 251,
					"name": "IfBigIntLiteral_Not",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfBigIntLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBigIntLiteral.d.ts#L21"
						}
					],
					"target": 104
				},
				{
					"id": 98,
					"name": "IfNotBigInt",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfBigInt_Not",
								"target": 94,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigInt.d.ts",
							"line": 27,
							"character": 30,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBigInt.d.ts#L27"
						}
					],
					"target": 94
				},
				{
					"id": 252,
					"name": "IfNotBigIntLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfBigIntLiteral_Not",
								"target": 104,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigIntLiteral.d.ts",
							"line": 30,
							"character": 37,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBigIntLiteral.d.ts#L30"
						}
					],
					"target": 108
				},
				{
					"id": 90,
					"name": "IfBigInt",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`bigint`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigInt.d.ts",
							"line": 10,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBigInt.d.ts#L10"
						}
					],
					"typeParameters": [
						{
							"id": 91,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`bigint`"
									}
								]
							}
						},
						{
							"id": 92,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 93,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 83,
						"typeArguments": [
							{
								"type": "reference",
								"target": 91,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 91,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "intrinsic",
									"name": "bigint"
								},
								"trueType": {
									"type": "reference",
									"target": 92,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 93,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 93,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 94,
					"name": "IfBigInt_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`bigint`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigInt.d.ts",
							"line": 22,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBigInt.d.ts#L22"
						}
					],
					"typeParameters": [
						{
							"id": 95,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`bigint`"
									}
								]
							}
						},
						{
							"id": 96,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 97,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 90,
						"typeArguments": [
							{
								"type": "reference",
								"target": 95,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 97,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 96,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfBigInt",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						250,
						251,
						98,
						252
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						90,
						94
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfBigInt.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBigInt.d.ts#L1"
				}
			]
		},
		{
			"id": 99,
			"name": "primitives/IfBigIntLiteral",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 108,
					"name": "IfNotBigIntLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfBigIntLiteral_Not",
								"target": 104,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigIntLiteral.d.ts",
							"line": 30,
							"character": 37,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBigIntLiteral.d.ts#L30"
						}
					],
					"target": 104
				},
				{
					"id": 100,
					"name": "IfBigIntLiteral",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`bigint`"
							},
							{
								"kind": "text",
								"text": " to be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigIntLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBigIntLiteral.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 101,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`bigint`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`bigint`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						},
						{
							"id": 102,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 103,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 94,
						"typeArguments": [
							{
								"type": "reference",
								"target": 101,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 103,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "intrinsic",
									"name": "bigint"
								},
								"extendsType": {
									"type": "reference",
									"target": 101,
									"name": "V",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 103,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 102,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							}
						],
						"name": "IfNotBigInt",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfBigInt_Not"
					}
				},
				{
					"id": 104,
					"name": "IfBigIntLiteral_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`bigint`"
							},
							{
								"kind": "text",
								"text": " to not be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBigIntLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBigIntLiteral.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 105,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`bigint`"
									},
									{
										"kind": "text",
										"text": " to test against not "
									},
									{
										"kind": "code",
										"text": "`bigint`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						},
						{
							"id": 106,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 107,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 100,
						"typeArguments": [
							{
								"type": "reference",
								"target": 105,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 107,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 106,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfBigIntLiteral",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						108
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						100,
						104
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfBigIntLiteral.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBigIntLiteral.d.ts#L1"
				}
			]
		},
		{
			"id": 109,
			"name": "primitives/IfBoolean",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 253,
					"name": "IfBooleanLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfBooleanLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBooleanLiteral.d.ts#L9"
						}
					],
					"target": 120
				},
				{
					"id": 254,
					"name": "IfBooleanLiteral_Not",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfBooleanLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBooleanLiteral.d.ts#L21"
						}
					],
					"target": 124
				},
				{
					"id": 118,
					"name": "IfNotBoolean",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfBoolean_Not",
								"target": 114,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBoolean.d.ts",
							"line": 27,
							"character": 31,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBoolean.d.ts#L27"
						}
					],
					"target": 114
				},
				{
					"id": 255,
					"name": "IfNotBooleanLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfBooleanLiteral_Not",
								"target": 124,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBooleanLiteral.d.ts",
							"line": 30,
							"character": 38,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBooleanLiteral.d.ts#L30"
						}
					],
					"target": 128
				},
				{
					"id": 110,
					"name": "IfBoolean",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`boolean`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBoolean.d.ts",
							"line": 10,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBoolean.d.ts#L10"
						}
					],
					"typeParameters": [
						{
							"id": 111,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									}
								]
							}
						},
						{
							"id": 112,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 113,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 83,
						"typeArguments": [
							{
								"type": "reference",
								"target": 111,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 111,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"trueType": {
									"type": "reference",
									"target": 112,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 113,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 113,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 114,
					"name": "IfBoolean_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`boolean`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBoolean.d.ts",
							"line": 22,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBoolean.d.ts#L22"
						}
					],
					"typeParameters": [
						{
							"id": 115,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									}
								]
							}
						},
						{
							"id": 116,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 117,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 110,
						"typeArguments": [
							{
								"type": "reference",
								"target": 115,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 117,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 116,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfBoolean",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						253,
						254,
						118,
						255
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						110,
						114
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfBoolean.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBoolean.d.ts#L1"
				}
			]
		},
		{
			"id": 119,
			"name": "primitives/IfBooleanLiteral",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 128,
					"name": "IfNotBooleanLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfBooleanLiteral_Not",
								"target": 124,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBooleanLiteral.d.ts",
							"line": 30,
							"character": 38,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBooleanLiteral.d.ts#L30"
						}
					],
					"target": 124
				},
				{
					"id": 120,
					"name": "IfBooleanLiteral",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`boolean`"
							},
							{
								"kind": "text",
								"text": " to be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBooleanLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBooleanLiteral.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 121,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 122,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 123,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 114,
						"typeArguments": [
							{
								"type": "reference",
								"target": 121,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 123,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"extendsType": {
									"type": "reference",
									"target": 121,
									"name": "V",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 123,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 122,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							}
						],
						"name": "IfNotBoolean",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfBoolean_Not"
					}
				},
				{
					"id": 124,
					"name": "IfBooleanLiteral_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`boolean`"
							},
							{
								"kind": "text",
								"text": " to not be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfBooleanLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBooleanLiteral.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 125,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									},
									{
										"kind": "text",
										"text": " to test against not "
									},
									{
										"kind": "code",
										"text": "`boolean`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 126,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 127,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 120,
						"typeArguments": [
							{
								"type": "reference",
								"target": 125,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 127,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 126,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfBooleanLiteral",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						128
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						120,
						124
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfBooleanLiteral.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfBooleanLiteral.d.ts#L1"
				}
			]
		},
		{
			"id": 129,
			"name": "primitives/IfNever",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 138,
					"name": "IfNotNever",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfNever_Not",
								"target": 134,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNever.d.ts",
							"line": 20,
							"character": 29,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNever.d.ts#L20"
						}
					],
					"target": 134
				},
				{
					"id": 130,
					"name": "IfNever",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`never`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNever.d.ts",
							"line": 7,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNever.d.ts#L7"
						}
					],
					"typeParameters": [
						{
							"id": 131,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`never`"
									}
								]
							}
						},
						{
							"id": 132,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 133,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "tuple",
							"elements": [
								{
									"type": "reference",
									"target": 131,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							]
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "intrinsic",
									"name": "never"
								}
							]
						},
						"trueType": {
							"type": "reference",
							"target": 132,
							"name": "Then",
							"package": "@sdt/typescript-utils",
							"refersToTypeParameter": true
						},
						"falseType": {
							"type": "reference",
							"target": 133,
							"name": "Else",
							"package": "@sdt/typescript-utils",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 134,
					"name": "IfNever_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`never`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNever.d.ts",
							"line": 15,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNever.d.ts#L15"
						}
					],
					"typeParameters": [
						{
							"id": 135,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`never`"
									}
								]
							}
						},
						{
							"id": 136,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 137,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 130,
						"typeArguments": [
							{
								"type": "reference",
								"target": 135,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 137,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 136,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNever",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						138
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						130,
						134
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfNever.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNever.d.ts#L1"
				}
			]
		},
		{
			"id": 139,
			"name": "primitives/IfNull",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 148,
					"name": "IfNotNull",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfNull_Not",
								"target": 144,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNull.d.ts",
							"line": 26,
							"character": 28,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNull.d.ts#L26"
						}
					],
					"target": 144
				},
				{
					"id": 140,
					"name": "IfNull",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`null`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNull.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNull.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 141,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`null`"
									}
								]
							}
						},
						{
							"id": 142,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 143,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 83,
						"typeArguments": [
							{
								"type": "reference",
								"target": 141,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 141,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "literal",
									"value": null
								},
								"trueType": {
									"type": "reference",
									"target": 142,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 143,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 143,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 144,
					"name": "IfNull_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`null`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNull.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNull.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 145,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`null`"
									}
								]
							}
						},
						{
							"id": 146,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 147,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 140,
						"typeArguments": [
							{
								"type": "reference",
								"target": 145,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 147,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 146,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNull",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						148
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						140,
						144
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfNull.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNull.d.ts#L1"
				}
			]
		},
		{
			"id": 149,
			"name": "primitives/IfNumber",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 158,
					"name": "IfNotNumber",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfNumber_Not",
								"target": 154,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumber.d.ts",
							"line": 27,
							"character": 30,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNumber.d.ts#L27"
						}
					],
					"target": 154
				},
				{
					"id": 258,
					"name": "IfNotNumberLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfNumberLiteral_Not",
								"target": 164,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumberLiteral.d.ts",
							"line": 30,
							"character": 37,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNumberLiteral.d.ts#L30"
						}
					],
					"target": 168
				},
				{
					"id": 256,
					"name": "IfNumberLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfNumberLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNumberLiteral.d.ts#L9"
						}
					],
					"target": 160
				},
				{
					"id": 257,
					"name": "IfNumberLiteral_Not",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfNumberLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNumberLiteral.d.ts#L21"
						}
					],
					"target": 164
				},
				{
					"id": 150,
					"name": "IfNumber",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`number`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumber.d.ts",
							"line": 10,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNumber.d.ts#L10"
						}
					],
					"typeParameters": [
						{
							"id": 151,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`number`"
									}
								]
							}
						},
						{
							"id": 152,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 153,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 83,
						"typeArguments": [
							{
								"type": "reference",
								"target": 151,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 151,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "intrinsic",
									"name": "number"
								},
								"trueType": {
									"type": "reference",
									"target": 152,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 153,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 153,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 154,
					"name": "IfNumber_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`number`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumber.d.ts",
							"line": 22,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNumber.d.ts#L22"
						}
					],
					"typeParameters": [
						{
							"id": 155,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`number`"
									}
								]
							}
						},
						{
							"id": 156,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 157,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 150,
						"typeArguments": [
							{
								"type": "reference",
								"target": 155,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 157,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 156,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNumber",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						158,
						258,
						256,
						257
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						150,
						154
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfNumber.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNumber.d.ts#L1"
				}
			]
		},
		{
			"id": 159,
			"name": "primitives/IfNumberLiteral",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 168,
					"name": "IfNotNumberLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfNumberLiteral_Not",
								"target": 164,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumberLiteral.d.ts",
							"line": 30,
							"character": 37,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNumberLiteral.d.ts#L30"
						}
					],
					"target": 164
				},
				{
					"id": 160,
					"name": "IfNumberLiteral",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": " to be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumberLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNumberLiteral.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 161,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 162,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 163,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 154,
						"typeArguments": [
							{
								"type": "reference",
								"target": 161,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 163,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "intrinsic",
									"name": "number"
								},
								"extendsType": {
									"type": "reference",
									"target": 161,
									"name": "V",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 163,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 162,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							}
						],
						"name": "IfNotNumber",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfNumber_Not"
					}
				},
				{
					"id": 164,
					"name": "IfNumberLiteral_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": " to not be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfNumberLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNumberLiteral.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 165,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " to test against not "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 166,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 167,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 160,
						"typeArguments": [
							{
								"type": "reference",
								"target": 165,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 167,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 166,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNumberLiteral",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						168
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						160,
						164
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfNumberLiteral.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfNumberLiteral.d.ts#L1"
				}
			]
		},
		{
			"id": 169,
			"name": "primitives/IfString",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 178,
					"name": "IfNotString",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfString_Not",
								"target": 174,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfString.d.ts",
							"line": 27,
							"character": 30,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfString.d.ts#L27"
						}
					],
					"target": 174
				},
				{
					"id": 261,
					"name": "IfNotStringLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfStringLiteral_Not",
								"target": 184,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfStringLiteral.d.ts",
							"line": 30,
							"character": 32,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfStringLiteral.d.ts#L30"
						}
					],
					"target": 188
				},
				{
					"id": 259,
					"name": "IfStringLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfStringLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfStringLiteral.d.ts#L9"
						}
					],
					"target": 180
				},
				{
					"id": 260,
					"name": "IfStringLiteral_Not",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfStringLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfStringLiteral.d.ts#L21"
						}
					],
					"target": 184
				},
				{
					"id": 170,
					"name": "IfString",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`string`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfString.d.ts",
							"line": 10,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfString.d.ts#L10"
						}
					],
					"typeParameters": [
						{
							"id": 171,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`string`"
									}
								]
							}
						},
						{
							"id": 172,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 173,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 83,
						"typeArguments": [
							{
								"type": "reference",
								"target": 171,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 171,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "intrinsic",
									"name": "string"
								},
								"trueType": {
									"type": "reference",
									"target": 172,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 173,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 173,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 174,
					"name": "IfString_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`string`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfString.d.ts",
							"line": 22,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfString.d.ts#L22"
						}
					],
					"typeParameters": [
						{
							"id": 175,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`string`"
									}
								]
							}
						},
						{
							"id": 176,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 177,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 170,
						"typeArguments": [
							{
								"type": "reference",
								"target": 175,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 177,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 176,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfString",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						178,
						261,
						259,
						260
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						170,
						174
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfString.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfString.d.ts#L1"
				}
			]
		},
		{
			"id": 179,
			"name": "primitives/IfStringLiteral",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 188,
					"name": "IfNotStringLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfStringLiteral_Not",
								"target": 184,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfStringLiteral.d.ts",
							"line": 30,
							"character": 32,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfStringLiteral.d.ts#L30"
						}
					],
					"target": 184
				},
				{
					"id": 180,
					"name": "IfStringLiteral",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`string`"
							},
							{
								"kind": "text",
								"text": " to be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfStringLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfStringLiteral.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 181,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 182,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 183,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 174,
						"typeArguments": [
							{
								"type": "reference",
								"target": 181,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 183,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "intrinsic",
									"name": "string"
								},
								"extendsType": {
									"type": "reference",
									"target": 181,
									"name": "V",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 183,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 182,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							}
						],
						"name": "IfNotString",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfString_Not"
					}
				},
				{
					"id": 184,
					"name": "IfStringLiteral_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`string`"
							},
							{
								"kind": "text",
								"text": " to not be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfStringLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfStringLiteral.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 185,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " to test against not "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 186,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 187,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 180,
						"typeArguments": [
							{
								"type": "reference",
								"target": 185,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 187,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 186,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfStringLiteral",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						188
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						180,
						184
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfStringLiteral.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfStringLiteral.d.ts#L1"
				}
			]
		},
		{
			"id": 189,
			"name": "primitives/IfSymbol",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 198,
					"name": "IfNotSymbol",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfSymbol_Not",
								"target": 194,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbol.d.ts",
							"line": 27,
							"character": 30,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfSymbol.d.ts#L27"
						}
					],
					"target": 194
				},
				{
					"id": 264,
					"name": "IfNotSymbolLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfSymbolLiteral_Not",
								"target": 204,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbolLiteral.d.ts",
							"line": 30,
							"character": 32,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfSymbolLiteral.d.ts#L30"
						}
					],
					"target": 208
				},
				{
					"id": 262,
					"name": "IfSymbolLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfSymbolLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfSymbolLiteral.d.ts#L9"
						}
					],
					"target": 200
				},
				{
					"id": 263,
					"name": "IfSymbolLiteral_Not",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "primitives/IfSymbolLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfSymbolLiteral.d.ts#L21"
						}
					],
					"target": 204
				},
				{
					"id": 190,
					"name": "IfSymbol",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`symbol`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbol.d.ts",
							"line": 10,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfSymbol.d.ts#L10"
						}
					],
					"typeParameters": [
						{
							"id": 191,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`symbol`"
									}
								]
							}
						},
						{
							"id": 192,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 193,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 83,
						"typeArguments": [
							{
								"type": "reference",
								"target": 191,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 191,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "intrinsic",
									"name": "symbol"
								},
								"trueType": {
									"type": "reference",
									"target": 192,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 193,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 193,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 194,
					"name": "IfSymbol_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`symbol`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbol.d.ts",
							"line": 22,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfSymbol.d.ts#L22"
						}
					],
					"typeParameters": [
						{
							"id": 195,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`symbol`"
									}
								]
							}
						},
						{
							"id": 196,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 197,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 190,
						"typeArguments": [
							{
								"type": "reference",
								"target": 195,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 197,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 196,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfSymbol",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						198,
						264,
						262,
						263
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						190,
						194
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfSymbol.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfSymbol.d.ts#L1"
				}
			]
		},
		{
			"id": 199,
			"name": "primitives/IfSymbolLiteral",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 208,
					"name": "IfNotSymbolLiteral",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfSymbolLiteral_Not",
								"target": 204,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbolLiteral.d.ts",
							"line": 30,
							"character": 32,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfSymbolLiteral.d.ts#L30"
						}
					],
					"target": 204
				},
				{
					"id": 200,
					"name": "IfSymbolLiteral",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`symbol`"
							},
							{
								"kind": "text",
								"text": " to be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbolLiteral.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfSymbolLiteral.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 201,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`symbol`"
									},
									{
										"kind": "text",
										"text": " to test against "
									},
									{
										"kind": "code",
										"text": "`symbol`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "symbol"
							}
						},
						{
							"id": 202,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 203,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 194,
						"typeArguments": [
							{
								"type": "reference",
								"target": 201,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 203,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "intrinsic",
									"name": "symbol"
								},
								"extendsType": {
									"type": "reference",
									"target": 201,
									"name": "V",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 203,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 202,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							}
						],
						"name": "IfNotSymbol",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfSymbol_Not"
					}
				},
				{
					"id": 204,
					"name": "IfSymbolLiteral_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a "
							},
							{
								"kind": "code",
								"text": "`symbol`"
							},
							{
								"kind": "text",
								"text": " to not be literal"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfSymbolLiteral.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfSymbolLiteral.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 205,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`symbol`"
									},
									{
										"kind": "text",
										"text": " to test against not "
									},
									{
										"kind": "code",
										"text": "`symbol`"
									},
									{
										"kind": "text",
										"text": " literal"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "symbol"
							}
						},
						{
							"id": 206,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 207,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 200,
						"typeArguments": [
							{
								"type": "reference",
								"target": 205,
								"name": "V",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 207,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 206,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfSymbolLiteral",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						208
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						200,
						204
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfSymbolLiteral.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfSymbolLiteral.d.ts#L1"
				}
			]
		},
		{
			"id": 209,
			"name": "primitives/IfUndefined",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 218,
					"name": "IfNotUndefined",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfUndefined_Not",
								"target": 214,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfUndefined.d.ts",
							"line": 26,
							"character": 33,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfUndefined.d.ts#L26"
						}
					],
					"target": 214
				},
				{
					"id": 210,
					"name": "IfUndefined",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfUndefined.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfUndefined.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 211,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									}
								]
							}
						},
						{
							"id": 212,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 213,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 83,
						"typeArguments": [
							{
								"type": "reference",
								"target": 211,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 211,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "intrinsic",
									"name": "undefined"
								},
								"trueType": {
									"type": "reference",
									"target": 212,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 213,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 213,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAnyOrNever",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAnyOrNever_Not"
					}
				},
				{
					"id": 214,
					"name": "IfUndefined_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfUndefined.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfUndefined.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 215,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									}
								]
							}
						},
						{
							"id": 216,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 217,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 210,
						"typeArguments": [
							{
								"type": "reference",
								"target": 215,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 217,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 216,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfUndefined",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						218
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						210,
						214
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfUndefined.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfUndefined.d.ts#L1"
				}
			]
		},
		{
			"id": 219,
			"name": "primitives/IfUnknown",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 228,
					"name": "IfNotUnknown",
					"variant": "reference",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "IfUnknown_Not",
								"target": 224,
								"tsLinkText": ""
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfUnknown.d.ts",
							"line": 26,
							"character": 31,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfUnknown.d.ts#L26"
						}
					],
					"target": 224
				},
				{
					"id": 220,
					"name": "IfUnknown",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type again "
							},
							{
								"kind": "code",
								"text": "`unknown`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfUnknown.d.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfUnknown.d.ts#L9"
						}
					],
					"typeParameters": [
						{
							"id": 221,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against "
									},
									{
										"kind": "code",
										"text": "`unknown`"
									}
								]
							}
						},
						{
							"id": 222,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 223,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 72,
						"typeArguments": [
							{
								"type": "reference",
								"target": 221,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "intrinsic",
									"name": "unknown"
								},
								"extendsType": {
									"type": "reference",
									"target": 221,
									"name": "T",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"trueType": {
									"type": "reference",
									"target": 222,
									"name": "Then",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "reference",
									"target": 223,
									"name": "Else",
									"package": "@sdt/typescript-utils",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": 223,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfNotAny",
						"package": "@sdt/typescript-utils",
						"qualifiedName": "IfAny_Not"
					}
				},
				{
					"id": 224,
					"name": "IfUnknown_Not",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Test a type against not "
							},
							{
								"kind": "code",
								"text": "`unknown`"
							}
						]
					},
					"sources": [
						{
							"fileName": "primitives/IfUnknown.d.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfUnknown.d.ts#L21"
						}
					],
					"typeParameters": [
						{
							"id": 225,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to test against not "
									},
									{
										"kind": "code",
										"text": "`unknown`"
									}
								]
							}
						},
						{
							"id": 226,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is true"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 227,
							"name": "Else",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type to return in case the condition is false"
									}
								]
							},
							"default": {
								"type": "literal",
								"value": false
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 220,
						"typeArguments": [
							{
								"type": "reference",
								"target": 225,
								"name": "T",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 227,
								"name": "Else",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 226,
								"name": "Then",
								"package": "@sdt/typescript-utils",
								"refersToTypeParameter": true
							}
						],
						"name": "IfUnknown",
						"package": "@sdt/typescript-utils"
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						228
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						220,
						224
					]
				}
			],
			"sources": [
				{
					"fileName": "primitives/IfUnknown.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sylvaindethier/typescript-utils/blob/1795037aeedf9a09ba1eb4489c1d6e36639ed4e4/types/primitives/IfUnknown.d.ts#L1"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"children": [
				1,
				66,
				12,
				21,
				34,
				39,
				44,
				48,
				49,
				58,
				59,
				60,
				61,
				67,
				77,
				89,
				99,
				109,
				119,
				129,
				139,
				149,
				159,
				169,
				179,
				189,
				199,
				209,
				219
			]
		}
	],
	"packageName": "@sdt/typescript-utils",
	"packageVersion": "0.3.0",
	"readme": [
		{
			"kind": "text",
			"text": "# @sdt/typescript-utils\n\n![NPM Version](https://img.shields.io/npm/v/%40sdt%2Ftypescript-utils)\n![Coverage](https://github.com/sylvaindethier/typescript-utils/blob/gh-pages/coverage.svg?raw=true)\n![CI](https://github.com/sylvaindethier/typescript-utils/workflows/CI/badge.svg)\n\n> TypeScript type safe utilities completely tested\n\n## Install\n\n- "
		},
		{
			"kind": "code",
			"text": "`npm`"
		},
		{
			"kind": "text",
			"text": "\n\n  "
		},
		{
			"kind": "code",
			"text": "```sh\n  npm install -D @sdt/typescript-utils\n  ```"
		},
		{
			"kind": "text",
			"text": "\n\n- "
		},
		{
			"kind": "code",
			"text": "`pnpm`"
		},
		{
			"kind": "text",
			"text": "\n\n  "
		},
		{
			"kind": "code",
			"text": "```sh\n  pnpm add -D @sdt/typescript-utils\n  ```"
		},
		{
			"kind": "text",
			"text": "\n\n- "
		},
		{
			"kind": "code",
			"text": "`yarn`"
		},
		{
			"kind": "text",
			"text": "\n\n  "
		},
		{
			"kind": "code",
			"text": "```sh\n  yarn add -D @sdt/typescript-utils\n  ```"
		},
		{
			"kind": "text",
			"text": "\n\n## Documentation\n\nSee the [documentation page](https://sylvaindethier.github.io/typescript-utils/)."
		}
	],
	"symbolIdMap": {
		"1": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": ""
		},
		"2": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "If"
		},
		"3": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "B"
		},
		"4": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "Then"
		},
		"5": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "Else"
		},
		"6": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "Error"
		},
		"7": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "IfNot"
		},
		"8": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "B"
		},
		"9": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "Then"
		},
		"10": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "Else"
		},
		"11": {
			"sourceFileName": "types/logic/If.d.ts",
			"qualifiedName": "Error"
		},
		"12": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": ""
		},
		"13": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "AND"
		},
		"14": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "X"
		},
		"15": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "Y"
		},
		"16": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "Error"
		},
		"17": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "PRODUCT"
		},
		"18": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "X"
		},
		"19": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "Y"
		},
		"20": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "Error"
		},
		"21": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": ""
		},
		"22": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "NOT_XOR"
		},
		"23": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "X"
		},
		"24": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "Y"
		},
		"25": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "Error"
		},
		"26": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "XNOR"
		},
		"27": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "X"
		},
		"28": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "Y"
		},
		"29": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "Error"
		},
		"30": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "EQV"
		},
		"31": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "X"
		},
		"32": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "Y"
		},
		"33": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "Error"
		},
		"34": {
			"sourceFileName": "types/logic/operators/IMP.d.ts",
			"qualifiedName": ""
		},
		"35": {
			"sourceFileName": "types/logic/operators/IMP.d.ts",
			"qualifiedName": "IMP"
		},
		"36": {
			"sourceFileName": "types/logic/operators/IMP.d.ts",
			"qualifiedName": "X"
		},
		"37": {
			"sourceFileName": "types/logic/operators/IMP.d.ts",
			"qualifiedName": "Y"
		},
		"38": {
			"sourceFileName": "types/logic/operators/IMP.d.ts",
			"qualifiedName": "Error"
		},
		"39": {
			"sourceFileName": "types/logic/operators/INH.d.ts",
			"qualifiedName": ""
		},
		"40": {
			"sourceFileName": "types/logic/operators/INH.d.ts",
			"qualifiedName": "INH"
		},
		"41": {
			"sourceFileName": "types/logic/operators/INH.d.ts",
			"qualifiedName": "X"
		},
		"42": {
			"sourceFileName": "types/logic/operators/INH.d.ts",
			"qualifiedName": "Y"
		},
		"43": {
			"sourceFileName": "types/logic/operators/INH.d.ts",
			"qualifiedName": "Error"
		},
		"44": {
			"sourceFileName": "types/logic/operators/NOT.d.ts",
			"qualifiedName": ""
		},
		"45": {
			"sourceFileName": "types/logic/operators/NOT.d.ts",
			"qualifiedName": "NOT"
		},
		"46": {
			"sourceFileName": "types/logic/operators/NOT.d.ts",
			"qualifiedName": "X"
		},
		"47": {
			"sourceFileName": "types/logic/operators/NOT.d.ts",
			"qualifiedName": "Error"
		},
		"48": {
			"sourceFileName": "types/logic/operators/NOT_XOR.d.ts",
			"qualifiedName": ""
		},
		"49": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": ""
		},
		"50": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "OR"
		},
		"51": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "X"
		},
		"52": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "Y"
		},
		"53": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "Error"
		},
		"54": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "SUM"
		},
		"55": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "X"
		},
		"56": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "Y"
		},
		"57": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "Error"
		},
		"58": {
			"sourceFileName": "types/logic/operators/PRODUCT.d.ts",
			"qualifiedName": ""
		},
		"59": {
			"sourceFileName": "types/logic/operators/SUM.d.ts",
			"qualifiedName": ""
		},
		"60": {
			"sourceFileName": "types/logic/operators/XNOR.d.ts",
			"qualifiedName": ""
		},
		"61": {
			"sourceFileName": "types/logic/operators/XOR.d.ts",
			"qualifiedName": ""
		},
		"62": {
			"sourceFileName": "types/logic/operators/XOR.d.ts",
			"qualifiedName": "XOR"
		},
		"63": {
			"sourceFileName": "types/logic/operators/XOR.d.ts",
			"qualifiedName": "X"
		},
		"64": {
			"sourceFileName": "types/logic/operators/XOR.d.ts",
			"qualifiedName": "Y"
		},
		"65": {
			"sourceFileName": "types/logic/operators/XOR.d.ts",
			"qualifiedName": "Error"
		},
		"66": {
			"sourceFileName": "types/logic/operators.d.ts",
			"qualifiedName": ""
		},
		"67": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": ""
		},
		"68": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "IfAny"
		},
		"69": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "T"
		},
		"70": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "Then"
		},
		"71": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "Else"
		},
		"72": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "IfAny_Not"
		},
		"73": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "T"
		},
		"74": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "Then"
		},
		"75": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "Else"
		},
		"76": {
			"sourceFileName": "types/primitives/IfAny.d.ts",
			"qualifiedName": "IfNotAny"
		},
		"77": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": ""
		},
		"78": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "IfAnyOrNever"
		},
		"79": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "T"
		},
		"80": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "Then"
		},
		"81": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "Else"
		},
		"82": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "IfNeverOrAny"
		},
		"83": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "IfAnyOrNever_Not"
		},
		"84": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "T"
		},
		"85": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "Then"
		},
		"86": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "Else"
		},
		"87": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "IfNotAnyOrNever"
		},
		"88": {
			"sourceFileName": "types/primitives/IfAnyOrNever.d.ts",
			"qualifiedName": "IfNotNeverOrAny"
		},
		"89": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": ""
		},
		"90": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "IfBigInt"
		},
		"91": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "T"
		},
		"92": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "Then"
		},
		"93": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "Else"
		},
		"94": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "IfBigInt_Not"
		},
		"95": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "T"
		},
		"96": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "Then"
		},
		"97": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "Else"
		},
		"98": {
			"sourceFileName": "types/primitives/IfBigInt.d.ts",
			"qualifiedName": "IfNotBigInt"
		},
		"99": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": ""
		},
		"100": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "IfBigIntLiteral"
		},
		"101": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "V"
		},
		"102": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"103": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"104": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "IfBigIntLiteral_Not"
		},
		"105": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "V"
		},
		"106": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"107": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"108": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "IfNotBigIntLiteral"
		},
		"109": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": ""
		},
		"110": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "IfBoolean"
		},
		"111": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "T"
		},
		"112": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "Then"
		},
		"113": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "Else"
		},
		"114": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "IfBoolean_Not"
		},
		"115": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "T"
		},
		"116": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "Then"
		},
		"117": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "Else"
		},
		"118": {
			"sourceFileName": "types/primitives/IfBoolean.d.ts",
			"qualifiedName": "IfNotBoolean"
		},
		"119": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": ""
		},
		"120": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "IfBooleanLiteral"
		},
		"121": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "V"
		},
		"122": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"123": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"124": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "IfBooleanLiteral_Not"
		},
		"125": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "V"
		},
		"126": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"127": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"128": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "IfNotBooleanLiteral"
		},
		"129": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": ""
		},
		"130": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "IfNever"
		},
		"131": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "T"
		},
		"132": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "Then"
		},
		"133": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "Else"
		},
		"134": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "IfNever_Not"
		},
		"135": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "T"
		},
		"136": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "Then"
		},
		"137": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "Else"
		},
		"138": {
			"sourceFileName": "types/primitives/IfNever.d.ts",
			"qualifiedName": "IfNotNever"
		},
		"139": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": ""
		},
		"140": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "IfNull"
		},
		"141": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "T"
		},
		"142": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "Then"
		},
		"143": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "Else"
		},
		"144": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "IfNull_Not"
		},
		"145": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "T"
		},
		"146": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "Then"
		},
		"147": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "Else"
		},
		"148": {
			"sourceFileName": "types/primitives/IfNull.d.ts",
			"qualifiedName": "IfNotNull"
		},
		"149": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": ""
		},
		"150": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "IfNumber"
		},
		"151": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "T"
		},
		"152": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "Then"
		},
		"153": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "Else"
		},
		"154": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "IfNumber_Not"
		},
		"155": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "T"
		},
		"156": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "Then"
		},
		"157": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "Else"
		},
		"158": {
			"sourceFileName": "types/primitives/IfNumber.d.ts",
			"qualifiedName": "IfNotNumber"
		},
		"159": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": ""
		},
		"160": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "IfNumberLiteral"
		},
		"161": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "V"
		},
		"162": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"163": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"164": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "IfNumberLiteral_Not"
		},
		"165": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "V"
		},
		"166": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"167": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"168": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "IfNotNumberLiteral"
		},
		"169": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": ""
		},
		"170": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "IfString"
		},
		"171": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "T"
		},
		"172": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "Then"
		},
		"173": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "Else"
		},
		"174": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "IfString_Not"
		},
		"175": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "T"
		},
		"176": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "Then"
		},
		"177": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "Else"
		},
		"178": {
			"sourceFileName": "types/primitives/IfString.d.ts",
			"qualifiedName": "IfNotString"
		},
		"179": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": ""
		},
		"180": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "IfStringLiteral"
		},
		"181": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "V"
		},
		"182": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"183": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"184": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "IfStringLiteral_Not"
		},
		"185": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "V"
		},
		"186": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"187": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"188": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "IfNotStringLiteral"
		},
		"189": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": ""
		},
		"190": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "IfSymbol"
		},
		"191": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "T"
		},
		"192": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "Then"
		},
		"193": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "Else"
		},
		"194": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "IfSymbol_Not"
		},
		"195": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "T"
		},
		"196": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "Then"
		},
		"197": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "Else"
		},
		"198": {
			"sourceFileName": "types/primitives/IfSymbol.d.ts",
			"qualifiedName": "IfNotSymbol"
		},
		"199": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": ""
		},
		"200": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "IfSymbolLiteral"
		},
		"201": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "V"
		},
		"202": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"203": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"204": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "IfSymbolLiteral_Not"
		},
		"205": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "V"
		},
		"206": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "Then"
		},
		"207": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "Else"
		},
		"208": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "IfNotSymbolLiteral"
		},
		"209": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": ""
		},
		"210": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "IfUndefined"
		},
		"211": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "T"
		},
		"212": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "Then"
		},
		"213": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "Else"
		},
		"214": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "IfUndefined_Not"
		},
		"215": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "T"
		},
		"216": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "Then"
		},
		"217": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "Else"
		},
		"218": {
			"sourceFileName": "types/primitives/IfUndefined.d.ts",
			"qualifiedName": "IfNotUndefined"
		},
		"219": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": ""
		},
		"220": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "IfUnknown"
		},
		"221": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "T"
		},
		"222": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "Then"
		},
		"223": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "Else"
		},
		"224": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "IfUnknown_Not"
		},
		"225": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "T"
		},
		"226": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "Then"
		},
		"227": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "Else"
		},
		"228": {
			"sourceFileName": "types/primitives/IfUnknown.d.ts",
			"qualifiedName": "IfNotUnknown"
		},
		"229": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "NOT_XOR"
		},
		"230": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "XNOR"
		},
		"231": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "EQV"
		},
		"232": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "AND"
		},
		"233": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "PRODUCT"
		},
		"234": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "OR"
		},
		"235": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "SUM"
		},
		"236": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "NOT_XOR"
		},
		"237": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "XNOR"
		},
		"238": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "EQV"
		},
		"239": {
			"sourceFileName": "types/logic/operators/NOT.d.ts",
			"qualifiedName": "NOT"
		},
		"240": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "OR"
		},
		"241": {
			"sourceFileName": "types/logic/operators/OR.d.ts",
			"qualifiedName": "SUM"
		},
		"242": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "AND"
		},
		"243": {
			"sourceFileName": "types/logic/operators/AND.d.ts",
			"qualifiedName": "PRODUCT"
		},
		"244": {
			"sourceFileName": "types/logic/operators/XOR.d.ts",
			"qualifiedName": "XOR"
		},
		"245": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "NOT_XOR"
		},
		"246": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "XNOR"
		},
		"247": {
			"sourceFileName": "types/logic/operators/EQV.d.ts",
			"qualifiedName": "EQV"
		},
		"248": {
			"sourceFileName": "types/logic/operators/IMP.d.ts",
			"qualifiedName": "IMP"
		},
		"249": {
			"sourceFileName": "types/logic/operators/INH.d.ts",
			"qualifiedName": "INH"
		},
		"250": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "IfBigIntLiteral"
		},
		"251": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "IfBigIntLiteral_Not"
		},
		"252": {
			"sourceFileName": "types/primitives/IfBigIntLiteral.d.ts",
			"qualifiedName": "IfNotBigIntLiteral"
		},
		"253": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "IfBooleanLiteral"
		},
		"254": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "IfBooleanLiteral_Not"
		},
		"255": {
			"sourceFileName": "types/primitives/IfBooleanLiteral.d.ts",
			"qualifiedName": "IfNotBooleanLiteral"
		},
		"256": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "IfNumberLiteral"
		},
		"257": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "IfNumberLiteral_Not"
		},
		"258": {
			"sourceFileName": "types/primitives/IfNumberLiteral.d.ts",
			"qualifiedName": "IfNotNumberLiteral"
		},
		"259": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "IfStringLiteral"
		},
		"260": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "IfStringLiteral_Not"
		},
		"261": {
			"sourceFileName": "types/primitives/IfStringLiteral.d.ts",
			"qualifiedName": "IfNotStringLiteral"
		},
		"262": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "IfSymbolLiteral"
		},
		"263": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "IfSymbolLiteral_Not"
		},
		"264": {
			"sourceFileName": "types/primitives/IfSymbolLiteral.d.ts",
			"qualifiedName": "IfNotSymbolLiteral"
		}
	}
}